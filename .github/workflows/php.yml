name: CI

on:
  push:
    branches: [ '**' ]
    paths-ignore:
      - '**.md'
  pull_request:
    branches: [ master, release-* ]
    paths-ignore:
      - '**.md'

jobs:
  basic-tests:
    name: Syntax and unit tests, PHP ${{ matrix.php-versions }}, ${{ matrix.operating-system }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest, windows-latest]
        php-versions: ['7.4', '8.0', '8.1', '8.2']

    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          coverage: pcov
          extensions: intl, mbstring, xml
          ini-values: error_reporting=E_ALL
          php-version: ${{ matrix.php-versions }}
          tools: composer:v2

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - name: Setup problem matchers for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3

      - name: Get composer cache directory (linux)
        if: ${{ matrix.operating-system == 'ubuntu-latest' }}
        run: echo "COMPOSER_CACHE=$(composer config cache-files-dir)" >> $GITHUB_ENV

      - name: Get composer cache directory (windows)
        if: ${{ matrix.operating-system == 'windows-latest' }}
        run: echo "COMPOSER_CACHE=$(composer config cache-files-dir)" >> $env:GITHUB_ENV

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: $COMPOSER_CACHE
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Decide whether to run code coverage or not
        if: ${{ matrix.php-versions != '7.4' || matrix.operating-system != 'ubuntu-latest' }}
        run: |
          echo "NO_COVERAGE=--no-coverage" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          echo $NO_COVERAGE
          ./vendor/bin/phpunit $NO_COVERAGE

      - name: Save coverage data
        if: ${{ matrix.php-versions == '7.4' && matrix.operating-system == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
            name: build-data
            path: ${{ github.workspace }}/build

  security:
    name: Security checks
    runs-on: [ubuntu-latest]
    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
            php-version: '7.4'
            tools: composer:v2
            extensions: mbstring, xml
            coverage: none

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - uses: actions/checkout@v3

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
            path: $COMPOSER_CACHE
            key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
            restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Security check for locked dependencies
        run: composer audit

      - name: Update Composer dependencies
        run: composer update --no-progress --prefer-dist --optimize-autoloader

      - name: Security check for updated dependencies
        run: composer audit

  sanity-check:
    name: Sanity checks
    runs-on: [ubuntu-latest]

    steps:
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: '7.4'
          extensions: mbstring, xml
          tools: composer:v2
          coverage: none

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - uses: actions/checkout@v3

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
            path: $COMPOSER_CACHE
            key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
            restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Syntax check YAML / XML / JSON
        run: |
          bash vendor/bin/check-syntax-yaml.sh
          bash vendor/bin/check-syntax-xml.sh
          bash vendor/bin/check-syntax-json.sh

  quality:
    name: Quality control
    runs-on: [ubuntu-latest]

    steps:
      - name: Setup PHP, with composer and extensions
        id: setup-php
        # https://github.com/shivammathur/setup-php
        uses: shivammathur/setup-php@v2
        with:
          # Should be the higest supported version, so we can use the newest tools
          php-version: '8.2'
          tools: composer, composer-require-checker, composer-unused, phpcs, psalm
          # optional performance gain for psalm: opcache
          extensions: ctype, date, dom, filter, hash, intl, mbstring, opcache, openssl, pcre, spl, xml

      - name: Setup problem matchers for PHP
        run: echo "::add-matcher::${{ runner.tool_cache }}/php.json"

      - uses: actions/checkout@v3

      - name: Get composer cache directory
        run: echo COMPOSER_CACHE="$(composer config cache-files-dir)" >> "$GITHUB_ENV"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: $COMPOSER_CACHE
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      #- name: Check code for hard dependencies missing in composer.json
      #  run: composer-require-checker check composer.json

      - name: Check code for unused dependencies in composer.json
        run: composer-unused

      - name: PHP Code Sniffer
        run: phpcs

      - name: Psalm
        continue-on-error: true
        run: |
          psalm -c psalm.xml \
          --show-info=true \
          --shepherd \
          --php-version=${{ steps.setup-php.outputs.php-version }}

      - name: Psalter
        run: |
          psalm --alter \
          --issues=UnnecessaryVarAnnotation \
          --dry-run \
          --php-version=${{ steps.setup-php.outputs.php-version }}